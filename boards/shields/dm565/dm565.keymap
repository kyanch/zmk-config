#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp PERCENT &kp N7   &kp N5    &kp N3   &kp N1 &kp N9                        &kp N0  &kp N2 &kp N4    &kp N6   &kp N8   &kp GRAVE
                &kp TILDE   &kp SEMI &kp COMMA &kp DOT  &kp P  &kp Y                         &kp F   &kp G  &kp C     &kp R    &kp L    &kp FSLH
                &kp CARET   &kp A    &kp O     &kp E    &kp U  &kp I                         &kp D   &kp H  &kp T     &kp N    &kp S    &kp MINUS
                &kp LCTRL   &kp SQT  &kp Q     &kp J    &kp K  &kp X                         &kp B   &kp M  &kp W     &kp V    &kp Z    &kp BSLH
                            &kp LBKT &kp RBKT                                                               &kp PLUS  &kp EQUAL
                                                 &lt LWR BSPC &kp TAB  &kp LCTRL    &kp RCTRL &kp TAB &lt LWR DEL
                                                              &kp LALT &kp LGUI     &kp RGUI  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
                &kp AMPS   &kp LBKT     &kp LBRC      &kp RBRC     &kp LPAR   &kp EQUAL                         &kp STAR    &kp RPAR   &kp PLUS      &kp RBKT     &kp EXCL     &kp POUND
                &kp DLLR   &kp COLON    &kp LT        &kp GT       &kp LS(P)  &kp LS(Y)                         &kp LS(F)   &kp LS(G)  &kp LS(C)     &kp LS(R)    &kp LS(L)    &kp QMARK
                &kp AT     &kp LS(A)    &kp LS(O)     &kp LS(E)    &kp LS(U)  &kp LS(I)                         &kp LS(D)   &kp LS(H)  &kp LS(T)     &kp LS(N)    &kp LS(S)    &kp UNDER
                &kp LS(LCTRL)   &kp DQT &kp LS(Q)     &kp LS(J)    &kp LS(K)  &kp LS(X)                         &kp LS(B)   &kp LS(M)  &kp LS(W)     &kp LS(V)    &kp LS(Z)    &kp PIPE
                                        &kp LS(LBKT) &kp LS(RBKT)                                                                      &to RSE  &kp LS(EQUAL)
                                                 &lt LWR BSPC &kp LS(TAB)  &to RSE          &kp LS(RCTRL) &kp LS(TAB) &to RSE
                                                              &kp LS(LALT) &kp LS(LGUI)     &kp LS(RGUI)  &kp LS(RALT)
            >;
        };

        raise_layer {
            bindings = <
                &trans  &trans &trans &trans &trans &trans                &trans &trans &trans &trans &trans &trans
                &trans  &trans &trans &trans &trans &trans                &trans &trans &trans &trans &trans &kp K_VOL_UP
                &trans  &trans &trans &trans &trans &trans                &trans &trans &trans &trans &trans &kp K_VOL_DN
                &trans  &trans &trans &trans &trans &trans                &trans &trans &trans &sys_reset &trans &kp K_MUTE
                               &trans &trans                                            &trans &bootloader
                                             &mo ADJ &trans &trans &trans &trans &trans
                                             &trans  &trans               &trans &trans
            >;
        };

        adjust_layer {
            bindings = <
                &none &bt BT_SEL 0 &out OUT_BLE &none &none  &none            &none       &none  &none &none &none &none
                &none &bt BT_SEL 1 &out OUT_USB &none &none  &none            &none       &none  &none &none &none &none
                &none &bt BT_SEL 2 &none        &none &none  &none            &none       &none  &none &none &none &none
                &none &bt BT_SEL 3 &bt BT_CLR   &none &none  &bootloader      &bootloader &none  &none &none &none &none
                                   &none        &none                                            &none &none
                                                      &none &none &trans &trans &none &none
                                                      &none &none               &none &none
            >;
        };
    };
};
